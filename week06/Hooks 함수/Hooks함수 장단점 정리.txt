React Hooks이란? 
ReactConf 2018에서 발표된 class없이 state를 사용할 수 있는 새로운 기능이다. 

장점 
1. 컴포넌트로부터 상태 관련 로직을 추상화할 수 있다. 
React는 컴포넌트간에 재사용 가능한 로직을 붙이는 방법을 제공하지 않는다. 이전부터 React를 사용해왔다면, render props이나 고차 컴포넌트와 같은 패턴을 통해 이러한 문제를 해결하는 방법에 익숙할 것이다. 그러나 이런 패턴의 사용은 컴포넌트의 재구성을 강요하며, 코드의 추적을 어렵게 만든다. 
Hook을 사용하면 컴포넌트로부터 상태 관련 로직을 추상화할 수 있다. 이를 이용해 독립적인 테스트와 재사용이 가능하다. Hook은 계층의 변화없이 상태 관련 로직을 재사용할 수 있도록 도와준다. 

2. Class없이 React 기능들을 사용하는 방법을 제시한다. 
React에서의 Class 사용을 위해서는 JavaScript의 this 키워드가 어떻게 작동하는지 알아야만 한다. 하지만 JavaScript의 this 키워드는 대부분의 다른 언어에서와는 다르게 동작함으로 사용자에게 큰 혼란을 주고 코드의 재사용성과 구성을 어렵게 만든다. 이러한 문제를 해결하기 위해 Hook은 Class없이 React 기능들을 사용하는 방법을 제시한다. 개념적으로 React 컴포넌트는 항상 함수에 더 가깝다. Hook은 명령형 코드로 해결책을 찾을 수 있게 해주며 복잡한 함수형 또는 반응형 프로그래밍 기술을 배우도록 요구하지 않는다. 

단점 
1. 호출되는 순서에 의존한다.
Hooks은 반복문, 조건문, 중첩된 함수 내에서 호출할 수 없다. 
만약 클릭하면 페이징되는 버튼을 구현하기 위해 useFetch를 사용하려고 한다면, react-async-hook 라이브러리를 사용하거나 custom hook을 만들어서 해결해야한다. 

--------------------------------------------------------------------
useState
state : 컴포넌트의 상태 
우리의 시간을 간편하게 생성하고 업데이트 시킬 수 있는 도구를 제공해줌 

- useState 생성과 동시에 가져야할 초기값을 선언해줌 -> useState의 인자로 넣어줌 -> state, setState의 두가지 요소를 배열 형태로 리턴해줌 
- 우리의 현재 상태값은 state라는 변수에 담아주고 
state을 변경시켜주고 싶을 때는 setState함수를 이용해서 변경시킬 수 있음 
- state, setState의 이름은 자유 
const [state, setState] = useState(초기값);

ex) const [state, setState] = useState(5);
State: 
state = 5 

인자로는 변경될 값을 넣어줌 
setState(6);

--------------------------------------------------------------------
useRef
ref를 접근하고 싶은 요소 태그에 넣어주면 해당 요소에 접근할 수 있음 
const ref = useRef(value)
      |______
             |
<input ref={ref}

주로 텍스트박스같이 input요소에 focus를 줄 때 많이 사용됨 
예를 들어 로그인 페이지가 로딩돼서 화면에 보여줄 때 id를 넣는 공간을 굳이 클릭하지 않아도 자동으로 focus가 되어있게해주면 바로 키보드를 쳐서 id를 입력할 수 있으니 편함 
즉, Ref를 사용하면 쉽게 DOM요소에 접근해서 작업가능 

--------------------------------------------------------------------
useMemo
컴포넌트 성능을 최적화하기 위해서 사용하는 대표적인 Hook함수는 useCallback과 useMemo가 있음 

Memo = Memoization

Memoization은 동일한 값을 리턴하는 함수를 반복적으로 호출해야한다면 맨 처음 값을 계산할 때 해당 값을 메모리에 저장해서 필요할 때마다 또 다시 계산하지 않고 메모리에서 꺼내서 재사용하는 기법 
즉, 자주 필요한 값을 맨 처음 계산할 때 캐싱해서 그 값이 필요할 때마다 다시 계산하는게 아니라 꺼내서 사용 

함수형 컴포넌트는 함수라는 사실 
-> 함수형 컴포넌트가 렌더링 된다는 말은 Component 함수 호출된다는 뜻 
함수는 호출될 때마다 모든 내부 변수를 초기화됨 

function Component(){
  const value = useMemo (
    () => calculate(), []
  );
  return <div>{value}</div>
}
처음에 계산된 결과값을 메모리에 저장해서 컴포넌트가 반복적으로 렌더링이 되어도 calculate를 다시 호출하지 않고 이전에 이미 계산된 결과값을 메모리에 꺼내와서 재사용함 

2개의 인자를 받는데 첫번째 인자는 Callback함수, 두번째 인자는 배열을 받음 
const value = useMemo(() => {
  return calculate();
}, [item]);
- 콜백함수는 Memoization해줄 값을 계산해서 return 해주는 함수 
- 배열은 의존성 배열이라고 부르는데, 배열안에 요소의 값이 업데이트될 때만 콜백함수를 다시 호출해서 Memoization된 값을 업데이트해서 다시 Memoization을 해줌 

--------------------------------------------------------------------
useCallback
ex)
const calculate = useCallback((num) => {
  return num + 1;
}, [item])
// 만약에 calculate 함수를 Memoization해준다면 useCallback으로 그 함수를 감싸주면됨 그래서 이 함수가 필요할 때마다 다시 생성하는게 아니라 메모리에서 가져와서 재사용 

function Calculate(){
 const calculate = useCallback((num) => {
  return num + 1;
}, [item]);
  return <div>{value}</div>
} 
// 컴포넌트가 다시 렌더링되더라도 calculate가 초기화되는걸 막을 수 있음 

[useCallback 구조]
2개의 인자를 받는데 첫번째 인자는 Memoization해주는 Callback함수, 두번째 인자는 의존성 배열을 받음 
 const calculate = useCallback((num) => {
  return num + 1;
 });
 // useCallback으로 감싸주면 calculate는 Memoization 된 함수를 갖고 있고 의존성 배열 내부에 있는 갓이 변경되지 않는 이상 다시 초기화되지않음 
 
--------------------------------------------------------------------
React.memo
: 리액트에서 제공하는 고차 컴포넌트이다. 
고차 컴포넌트란 어떤 컴포넌트를 인자로 받아서 새로운 컴포넌트를 반환해주는 함수이다. 
React.memo라는 고차함수에 어떤 컴포넌트를 넣어주면 UI나 기능적으로 똑같지만 좀 더 최적화된 컴포넌트를 반환해줌 -> 이렇게 최적화가 된 컴포넌트는 렌더링이 되어야 할 상황에 놓일 때마다 Prop Check를 통해서 자신이 받는 props의 변화가 있는지 없는지 확인함 -> props에 변화가 있으면 렌더링을 하고 props에 변화가 없다면 새로 렌더링을 하는 것이 아니라 기존에 이미 렌더링이 된 내용을 재사용함 

Q. 컴포넌트는 불필요한 렌더링을 막을 수 있는 방법이 없을까? 
굳이 반복해서 많이 렌더링이 된다면 또 그 컴포넌트가 렌더링이 될 때마다 복잡한 로직을 수행한다면 컴포넌트의 성능은 떨어짐 

<Student/> 
const Student = ({name, age, address}) => {
  return (
    <div>
      <h1>{name}</h1>
      <span>{age}</span>
      <span>{address}</span>
    </div>
  )
}
// name, age, address는 props로 전달받음 

<School/> 
const School = ({props}) => {
  return (
    <Student
      name={'홍길동'}
      age={20}
      address={"우리집"}
    />
  )
}
// School 컴포넌트는 Student 컴포넌트를 자식으로 갖고 있는 부모 컴포넌트임 
// 리액트에서는 부모 컨포넌트가 렌더링이 되면 모든 자식 컴포넌트들도 자동적으로 렌더링됨 

- name, age, address가 변경되는 경우에만 렌더링이 되게 만들면 훨씬 효율적이니 React.memo를 사용하면 됨

⚠️ React.memo를 사용하기에 적합한 상황 
1. 컴포넌트가 같은 props로 자주 렌더링 될 때 
2. 컴포넌트가 렌더링이 될 떄마다 복잡한 로직을 처리해야할 때 

🚨 React.memo는 오직 Props 변화에만 의존하는 최적화 방법이다. 

--------------------------------------------------------------------
useEffect
어떤 컴포넌트가 Mount 되었을 때(화면에 첫 렌더링), Update 되었을 때(다시 렌더링), Unmount 되었을 때(화면에서 사라질 때) => 특정 작업을 처리할 코드를 실행시켜주고 싶을 때 사용! 

useEffect(()=>{})
인자로 콜백함수를 받음 (콜백함수란 다른 함수의 인자로 전달된 함수를 의미)

형태 2가지 
1. useEffect 인자로 하나의 콜백함수만 받는 형태 
useEffect(()=>{
  // 작업내용 
});
// 컴포넌트가 맨 처음 화면에 렌더링이 될 때 또는 컴포넌트가 다시 렌더링이 될 때  

2. 첫번째 인자로 콜백함수, 두번째 인자로 배열을 받는 형태
useEffect(()=>{
  // 작업내용 
}, [value]);
// 매번 렌더링이 될 때마다 실행되는게 아니라 컴포넌트가 맨 처음 화면에 렌더링이 될 때, 배열안에 있는 요소가 바뀔 때만 실행 

useEffect(()=>{
  // 작업내용 
    return () => {
      // 작업내용 
    }
}, []);





