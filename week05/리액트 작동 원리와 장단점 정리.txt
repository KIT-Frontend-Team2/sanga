리액트는 사용자 인터페이스를 만들기 위한 자바스크립트 라이브러리, SPA로 사용자와의 인터렉션이 일어났을 때 화면 깜빡임없이 변경 사항만 부드럽게 바뀌어 화면에 표시해주는 UI 프레임워크

Q. 리액트 사용 이유?

동적으로 변하는 UI를 만들기 위해서이다. 따라서 리액트는 동적으로 값이 변하는 State를 가지고 있는데, 이 State가 변할 때 UI를 자동으로 업데이트해주는 자바스크립트 라이브러리이다.

이 UI가 변할 때 모든 화면을 한번에 갈아엎으면 자원 손실이 크니깐 가상 DOM을 사용하여 변경될 부분만 효율적으로 업데이트해주는 구조를 가지고 있다.

- 리액트가 변경사항만 바꿀 수 있게 하는 핵심 기술은 바로 Virtual DOM이다.
기본적으로 DOM에 변경 사항이 생기면 HTML Parser -> DOM Tree -> CSSOM -> Render Tree -> Painting -> Display 라는 긴 과정을 최상위 엘리먼트부터 변경이 있는 DOM까지 다시 진행시킨다.

반면 Virtual DOM을 사용하면 아래 그림과 같이 변화가 생긴 컴포넌트와 그 자손에 대해서만 Virtual DOM을 생성하고 변화 전 Virtual DOM과 변화 후 Virtual DOM을 비교하여 변경된 부분만 DOM Tree ~ Painting -> Display 라는 과정을 거치게 한다.

[리액트 특징]
1. 선언적이다
- 리액트는 대화형 UI를 작성하기에 유리하다. 데이터가 변경되었을 때 효율적으로 렌더링을 수행할 수 있도록 한다.
2. 컴포넌트 기반이다
- 캡슐화된 컴포넌트가 스스로 상태를 관리하고 복잡한 UI도 효과적으로 구성할 수 있음
한 번 배워서 어디에서나 사용하기
3. 기존 소스를 불필요하게 다시 작성하지 않고 새 기능을 개발 할 수 있다. Node서버에서 랜더링을 할 수도 있고, 온라인 웹에서도 사용 가능하다. RN(React Native)을 쓰면 모바일 앱도 만들 수 있다.

[리액트 장단점]
1. 장점
- React 공식 문서 가이드와 방대한 커뮤니티, 자료를 통해 쉽게 접하고 배울 수 있다.
- Controller, directive, template, model, view 처럼 로직을 분리하는 것이 아닌, Component 하나로 관리를 한다. (이게 view 역할을 담당)
- 성능이 뛰어난 가비지 컬랙터, 메모리 관리 기능을 지원한다.
- UI 수정과 재사용성이 좋으며, 코드 가독성을 높일 수 있다.
- 다른 framework나 라이브러리와 병행해서 사용할 수 있다. 이는 개발이 이미 완료된 프로젝트에도 적절히 녹여낼 수 있는 확장성도 포함한다.

2. 단점
- IE8 이하 버전은 지원하지 않는다.
- view 이외의 기능은 직접 구현하거나 라이브러리를 사용해서 구현해야 하기에 javascript 배경지식이 필수 선행이다.
- 데이터 모델링, 라우팅, Ajax 등 기능 지원이 안된다.
- 로딩시간이 길다.
